// <auto-generated />
using System;
using DbcLib;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace StockSharpDriver.Migrations
{
    [DbContext(typeof(TelegramBotAppContext))]
    [Migration("20250905093024_AppTelegramBotContext001")]
    partial class AppTelegramBotContext001
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.36");

            modelBuilder.Entity("SharedLib.ChatTelegramModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ChatTelegramId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsForum")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LastMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdateUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedFirstNameUpper")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedLastNameUpper")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedTitleUpper")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUsernameUpper")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChatTelegramId")
                        .IsUnique();

                    b.HasIndex("FirstName");

                    b.HasIndex("IsForum");

                    b.HasIndex("LastName");

                    b.HasIndex("LastUpdateUtc");

                    b.HasIndex("NormalizedFirstNameUpper");

                    b.HasIndex("NormalizedLastNameUpper");

                    b.HasIndex("NormalizedTitleUpper");

                    b.HasIndex("NormalizedUsernameUpper");

                    b.HasIndex("Title");

                    b.HasIndex("Type");

                    b.HasIndex("Username");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("SharedLib.ErrorSendingMessageTelegramBotModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChatId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ErrorCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExceptionTypeName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEditing")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParseModeName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReplyToMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SourceMessageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("ErrorCode");

                    b.HasIndex("ExceptionTypeName");

                    b.HasIndex("IsDisabled");

                    b.HasIndex("ReplyToMessageId");

                    b.HasIndex("SourceMessageId");

                    b.ToTable("ErrorsSendingTextMessageTelegramBot");
                });

            modelBuilder.Entity("SharedLib.JoinUserChatModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChatId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId", "ChatId")
                        .IsUnique();

                    b.ToTable("JoinsUsersToChats");
                });

            modelBuilder.Entity("SharedLib.MessageTelegramModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuthorSignature")
                        .HasColumnType("TEXT");

                    b.Property<string>("Caption")
                        .HasColumnType("TEXT");

                    b.Property<int>("ChatId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ForwardDate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ForwardFromChatId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ForwardFromId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ForwardFromMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ForwardSenderName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ForwardSignature")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FromId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsAutomaticForward")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsTopicMessage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MediaGroupId")
                        .HasColumnType("TEXT");

                    b.Property<int>("MessageTelegramId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MessageThreadId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NormalizedCaptionUpper")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedTextUpper")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReplyToMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SenderChatId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ViaBotId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("FromId");

                    b.HasIndex("MessageTelegramId", "ChatId", "FromId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("SharedLib.RoleUserTelegramModelDB", b =>
                {
                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Role", "UserId");

                    b.HasIndex("UserId");

                    b.HasIndex("Role", "UserId")
                        .IsUnique();

                    b.ToTable("RolesUsers");
                });

            modelBuilder.Entity("SharedLib.UserTelegramModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("AddedToAttachmentMenu")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsBot")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsPremium")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LanguageCode")
                        .HasColumnType("TEXT");

                    b.Property<int>("LastMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdateUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedFirstNameUpper")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedLastNameUpper")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUsernameUpper")
                        .HasColumnType("TEXT");

                    b.Property<long>("UserTelegramId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FirstName");

                    b.HasIndex("IsBot");

                    b.HasIndex("LastName");

                    b.HasIndex("UserTelegramId")
                        .IsUnique();

                    b.HasIndex("Username");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SharedLib.ErrorSendingMessageTelegramBotModelDB", b =>
                {
                    b.HasOne("SharedLib.ChatTelegramModelDB", "Chat")
                        .WithMany("Errors")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("SharedLib.JoinUserChatModelDB", b =>
                {
                    b.HasOne("SharedLib.ChatTelegramModelDB", "Chat")
                        .WithMany("UsersJoins")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedLib.UserTelegramModelDB", "User")
                        .WithMany("ChatsJoins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharedLib.MessageTelegramModelDB", b =>
                {
                    b.HasOne("SharedLib.ChatTelegramModelDB", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedLib.UserTelegramModelDB", "From")
                        .WithMany("Messages")
                        .HasForeignKey("FromId");

                    b.Navigation("Chat");

                    b.Navigation("From");
                });

            modelBuilder.Entity("SharedLib.RoleUserTelegramModelDB", b =>
                {
                    b.HasOne("SharedLib.UserTelegramModelDB", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharedLib.ChatTelegramModelDB", b =>
                {
                    b.Navigation("Errors");

                    b.Navigation("Messages");

                    b.Navigation("UsersJoins");
                });

            modelBuilder.Entity("SharedLib.UserTelegramModelDB", b =>
                {
                    b.Navigation("ChatsJoins");

                    b.Navigation("Messages");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
