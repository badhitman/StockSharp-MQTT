// <auto-generated />
using System;
using DbcLib;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace StockSharpDriver.Migrations
{
    [DbContext(typeof(StockSharpAppContext))]
    partial class StockSharpAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.36");

            modelBuilder.Entity("SharedLib.BoardStockSharpModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ExchangeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("ExchangeId");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("SharedLib.ExchangeStockSharpModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CountryCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Exchanges");
                });

            modelBuilder.Entity("SharedLib.InstrumentStockSharpModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BoardId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CfiCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Class")
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAtUTC")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Currency")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Decimals")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("FaceValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdRemote")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdatedAtUTC")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Multiplier")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("OptionStyle")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OptionType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PrimaryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("SettlementDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SettlementType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShortName")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Shortable")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TypeInstrument")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UnderlyingSecurityId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UnderlyingSecurityType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.HasIndex("CfiCode");

                    b.HasIndex("Class");

                    b.HasIndex("Code");

                    b.HasIndex("IdRemote");

                    b.HasIndex("IsFavorite");

                    b.HasIndex("LastUpdatedAtUTC");

                    b.HasIndex("PrimaryId");

                    b.HasIndex("UnderlyingSecurityId");

                    b.ToTable("Instruments");
                });

            modelBuilder.Entity("SharedLib.OrderStockSharpModelDB", b =>
                {
                    b.Property<int>("IdPK")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("AveragePrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Balance")
                        .HasColumnType("TEXT");

                    b.Property<string>("BoardId")
                        .HasColumnType("TEXT");

                    b.Property<string>("BrokerCode")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("CancelledTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Commission")
                        .HasColumnType("TEXT");

                    b.Property<string>("CommissionCurrency")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAtUTC")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Currency")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InstrumentId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsManual")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsMarketMaker")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsSystem")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdatedAtUTC")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("LatencyCancellation")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("LatencyEdition")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("LatencyRegistration")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Leverage")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LocalTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MarginMode")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("MatchedTime")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MinVolume")
                        .HasColumnType("TEXT");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PositionEffect")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("PostOnly")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<long>("SeqNum")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Side")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Slippage")
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StringId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TimeInForce")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TransactionId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserOrderId")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("VisibleVolume")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Volume")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Yield")
                        .HasColumnType("TEXT");

                    b.HasKey("IdPK");

                    b.HasIndex("BoardId");

                    b.HasIndex("BrokerCode");

                    b.HasIndex("Id");

                    b.HasIndex("InstrumentId");

                    b.HasIndex("LastUpdatedAtUTC");

                    b.HasIndex("PortfolioId");

                    b.HasIndex("StringId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SharedLib.PortfolioTradeModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BoardId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClientCode")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAtUTC")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Currency")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DepoName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdatedAtUTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("State")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.HasIndex("IsFavorite");

                    b.HasIndex("LastUpdatedAtUTC");

                    b.ToTable("Portfolios");
                });

            modelBuilder.Entity("SharedLib.BoardStockSharpModelDB", b =>
                {
                    b.HasOne("SharedLib.ExchangeStockSharpModelDB", "Exchange")
                        .WithMany("Boards")
                        .HasForeignKey("ExchangeId");

                    b.Navigation("Exchange");
                });

            modelBuilder.Entity("SharedLib.InstrumentStockSharpModelDB", b =>
                {
                    b.HasOne("SharedLib.BoardStockSharpModelDB", "Board")
                        .WithMany("Instruments")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("SharedLib.OrderStockSharpModelDB", b =>
                {
                    b.HasOne("SharedLib.InstrumentStockSharpModelDB", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedLib.PortfolioTradeModelDB", "Portfolio")
                        .WithMany("Orders")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instrument");

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("SharedLib.PortfolioTradeModelDB", b =>
                {
                    b.HasOne("SharedLib.BoardStockSharpModelDB", "Board")
                        .WithMany()
                        .HasForeignKey("BoardId");

                    b.Navigation("Board");
                });

            modelBuilder.Entity("SharedLib.BoardStockSharpModelDB", b =>
                {
                    b.Navigation("Instruments");
                });

            modelBuilder.Entity("SharedLib.ExchangeStockSharpModelDB", b =>
                {
                    b.Navigation("Boards");
                });

            modelBuilder.Entity("SharedLib.PortfolioTradeModelDB", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
